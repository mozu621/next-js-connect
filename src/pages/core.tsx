import type { NextPage } from 'next';
import Head from 'next/head';

import { useEffect, useState } from 'react';
import { FaSearch } from 'react-icons/fa';
import Modal from 'react-modal';

import { useSelector } from 'react-redux';
import { selectPortfolios, selectTags } from '../app/store/slices/portfolioSlice';
import { PROPS_PORTFOLIO, PROPS_TAG } from '../app/store/types';
import { Card } from '../components/Card';

Modal.setAppElement('#__next');

const Home: NextPage = () => {
  const portfolios = useSelector(selectPortfolios);
  const tags = useSelector(selectTags);
  const [openTab, setOpenTab] = useState(1);

  //検索機能
  const allportfolioList = portfolios;
  const [inputValue, setInputValue] = useState('');
  const [portfolioList, setPortfolioList] = useState<PROPS_PORTFOLIO[]>(allportfolioList);
  const search = (value: string) => {
    if (value !== '') {
      const filteredList = allportfolioList.filter((portfolio: PROPS_PORTFOLIO) => {
        return portfolio.title.toString().toLowerCase().includes(value.toLowerCase());
      });
      setPortfolioList(filteredList);
      return;
    }

    setPortfolioList(allportfolioList);
    return;
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInputValue(e.target.value);
    search(e.target.value);
  };

  //tag検索機能

  //tagdataの取得
  const alltagList = tags;
  //すべのタグからポートフォリオの重複を削除する（初期値の作成）
  const uniqetagList = alltagList.filter(function (x, i, array) {
    return (
      array.findIndex(function (y) {
        return y.tagPortfolio.id === x.tagPortfolio.id;
      }) === i
    );
  });

  const [inputtagValue, setInputtagValue] = useState('');
  const [tagList, settagList] = useState(uniqetagList);
  const tagsearch = (value: string) => {
    if (value !== '') {
      //すべてのtagから入力値に該当するtagnameの入ったtagを取得する
      const filteredtagList = alltagList.filter((tag: PROPS_TAG) => {
        return tag.tagname.toString().toLowerCase().includes(value.toLowerCase());
      });
      //filteredtagListからtagPortfolio.idの重複を削除する
      const filtereduniquetagList = filteredtagList.filter(function (x, i, array) {
        return (
          array.findIndex(function (y) {
            return y.tagPortfolio.id === x.tagPortfolio.id;
          }) === i
        );
      });
      settagList(filtereduniquetagList);
      return;
    }

    settagList(uniqetagList);
    return;
  };

  const handleChange2 = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInputtagValue(e.target.value);
    tagsearch(e.target.value);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <div className='flex flex-wrap'>
        <div className='relative mx-auto w-full max-w-md rounded-md'>
          <ul className='flex flex-row flex-wrap mb-0 list-none' role='tablist'>
            <li className=' last:mr-0 -mb-px text-center'>
              <a
                className={
                  'p-2 text-xs font-bold uppercase  py-3 shadow-lg rounded block leading-normal ' +
                  (openTab === 1 ? 'text-black bg-gray-300' : 'text-blueGray-600 bg-white')
                }
                onClick={(e) => {
                  e.preventDefault();
                  setOpenTab(1);
                }}
              >
                タイトル検索
              </a>
            </li>
            <li className=' last:mr-0 -mb-px text-center'>
              <a
                className={
                  'p-2 text-xs font-bold uppercase  py-3 shadow-lg rounded block leading-normal ' +
                  (openTab === 2 ? 'text-black bg-gray-300' : 'text-blueGray-600 bg-white')
                }
                onClick={(e) => {
                  e.preventDefault();
                  setOpenTab(2);
                }}
              >
                タグ検索
              </a>
            </li>
          </ul>
          <div className='relative mx-auto w-full max-w-md rounded-md'>
            <div className='relative'>
              <span className='flex absolute inset-y-0 left-0 items-center pl-3'>
                <FaSearch />
              </span>
              <div className={openTab === 1 ? 'block' : 'hidden'}>
                <input
                  type='text'
                  value={inputValue}
                  onChange={handleChange}
                  className='py-3 pr-4 pl-10 w-full text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 rounded-md border focus:border-blue-500 dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring'
                  placeholder='タイトルで検索'
                />
              </div>
              <div className={openTab === 2 ? 'block' : 'hidden'}>
                <input
                  type='tag'
                  value={inputtagValue}
                  onChange={handleChange2}
                  className='py-3 pr-4 pl-10 w-full text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 rounded-md border focus:border-blue-500 dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring'
                  placeholder='tagで検索'
                />
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className='m-5 text-2xl font-extrabold text-center'>ポートフォリオ一覧</div>

      <div className='flex flex-wrap'>
        {openTab === 1 &&
          portfolioList.map((portfolio, i) => (
            <div key={i} className='flex lg:w-1/4'>
              <Card
                title={portfolio.title}
                portfolioid={portfolio.id}
                author={portfolio.author}
                portfolioimg={portfolio.img}
              />
            </div>
          ))}
      </div>

      <div className='flex flex-wrap'>
        {openTab === 2 &&
          tagList.map((tag, i) => (
            <div key={i} className='flex lg:w-1/4'>
              <Card
                title={tag.tagPortfolio.title}
                portfolioid={tag.tagPortfolio.id}
                author={tag.tagPortfolio.author}
                portfolioimg={tag.tagPortfolio.img}
              />
            </div>
          ))}
      </div>
    </>
  );
};

export default Home;
